package IGU;

import javax.swing.JTextArea;
import javax.swing.JTextField;

public class RecorridosMatriz extends javax.swing.JFrame {

    public RecorridosMatriz() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Generar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        CampoMatriz = new javax.swing.JTextArea();
        abajo_arriba = new javax.swing.JButton();
        izq_der = new javax.swing.JButton();
        arriba_abajo = new javax.swing.JButton();
        der_izq = new javax.swing.JButton();
        izq2_der2 = new javax.swing.JButton();
        ab_arr_ab_ab = new javax.swing.JButton();
        der2_izq2 = new javax.swing.JButton();
        aba2_arri2 = new javax.swing.JButton();
        tw1 = new javax.swing.JButton();
        tw2 = new javax.swing.JButton();
        twister = new javax.swing.JButton();
        tw3 = new javax.swing.JButton();
        recorrido = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Limpiar = new javax.swing.JButton();
        Salir = new javax.swing.JButton();
        recorido = new javax.swing.JLabel();
        Columnas = new javax.swing.JTextField();
        Filas = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Filas");

        jLabel2.setText("Columnas");

        Generar.setText("Generar");
        Generar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerarActionPerformed(evt);
            }
        });

        CampoMatriz.setColumns(20);
        CampoMatriz.setRows(5);
        jScrollPane1.setViewportView(CampoMatriz);

        abajo_arriba.setIcon(new javax.swing.ImageIcon("C:\\Users\\robin\\OneDrive\\Imágenes\\Nueva carpeta\\Nueva carpeta\\arriba abajo.png")); // NOI18N
        abajo_arriba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abajo_arribaActionPerformed(evt);
            }
        });

        izq_der.setIcon(new javax.swing.ImageIcon("C:\\Users\\robin\\OneDrive\\Imágenes\\Nueva carpeta\\Nueva carpeta\\izq der.png")); // NOI18N
        izq_der.setPreferredSize(new java.awt.Dimension(48, 37));
        izq_der.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                izq_derActionPerformed(evt);
            }
        });

        arriba_abajo.setIcon(new javax.swing.ImageIcon("C:\\Users\\robin\\OneDrive\\Imágenes\\Nueva carpeta\\Nueva carpeta\\abajo arriba.png")); // NOI18N
        arriba_abajo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                arriba_abajoActionPerformed(evt);
            }
        });

        der_izq.setIcon(new javax.swing.ImageIcon("C:\\Users\\robin\\OneDrive\\Imágenes\\Nueva carpeta\\Nueva carpeta\\der izq.png")); // NOI18N
        der_izq.setPreferredSize(new java.awt.Dimension(48, 37));
        der_izq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                der_izqActionPerformed(evt);
            }
        });

        izq2_der2.setIcon(new javax.swing.ImageIcon("C:\\Users\\robin\\OneDrive\\Imágenes\\Nueva carpeta\\Nueva carpeta\\izq2 der2.png")); // NOI18N
        izq2_der2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                izq2_der2ActionPerformed(evt);
            }
        });

        ab_arr_ab_ab.setIcon(new javax.swing.ImageIcon("C:\\Users\\robin\\OneDrive\\Imágenes\\Nueva carpeta\\Nueva carpeta\\ar-ab-ar-ar.png")); // NOI18N
        ab_arr_ab_ab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ab_arr_ab_abActionPerformed(evt);
            }
        });

        der2_izq2.setIcon(new javax.swing.ImageIcon("C:\\Users\\robin\\OneDrive\\Imágenes\\Nueva carpeta\\Nueva carpeta\\izq2 der2.png")); // NOI18N
        der2_izq2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                der2_izq2ActionPerformed(evt);
            }
        });

        aba2_arri2.setIcon(new javax.swing.ImageIcon("C:\\Users\\robin\\OneDrive\\Imágenes\\Nueva carpeta\\Nueva carpeta\\ab2-ar2.png")); // NOI18N
        aba2_arri2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aba2_arri2ActionPerformed(evt);
            }
        });

        tw1.setIcon(new javax.swing.ImageIcon("C:\\Users\\robin\\OneDrive\\Imágenes\\Nueva carpeta\\Nueva carpeta\\tw1.png")); // NOI18N
        tw1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tw1ActionPerformed(evt);
            }
        });

        tw2.setIcon(new javax.swing.ImageIcon("C:\\Users\\robin\\OneDrive\\Imágenes\\Nueva carpeta\\Nueva carpeta\\tw2.png")); // NOI18N
        tw2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tw2ActionPerformed(evt);
            }
        });

        twister.setIcon(new javax.swing.ImageIcon("C:\\Users\\robin\\OneDrive\\Imágenes\\Nueva carpeta\\Nueva carpeta\\TW4.png")); // NOI18N
        twister.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twisterActionPerformed(evt);
            }
        });

        tw3.setIcon(new javax.swing.ImageIcon("C:\\Users\\robin\\OneDrive\\Imágenes\\Nueva carpeta\\Nueva carpeta\\tw3.png")); // NOI18N
        tw3.setPreferredSize(new java.awt.Dimension(75, 23));
        tw3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tw3ActionPerformed(evt);
            }
        });

        recorrido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recorridoActionPerformed(evt);
            }
        });

        jLabel3.setText("Matriz Original");

        Limpiar.setText("Limpiar");
        Limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimpiarActionPerformed(evt);
            }
        });

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        recorido.setText("Recorrido");

        Columnas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColumnasActionPerformed(evt);
            }
        });

        Filas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(tw1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)
                                .addComponent(tw2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(izq2_der2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ab_arr_ab_ab, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(abajo_arriba, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(izq_der, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(der_izq, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(arriba_abajo, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(1, 12, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(tw3, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(twister, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(der2_izq2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(aba2_arri2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(428, 428, 428)
                        .addComponent(recorido)))
                .addGap(95, 95, 95)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Salir, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Generar, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(110, 110, 110))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Filas, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Columnas, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recorrido)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(103, 103, 103)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(Columnas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Filas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(Generar, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(arriba_abajo, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(der_izq, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(izq_der, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(abajo_arriba, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(11, 11, 11)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(izq2_der2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(ab_arr_ab_ab, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(der2_izq2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(aba2_arri2, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tw2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tw3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(twister, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Salir, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tw1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(Limpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jLabel3)
                .addGap(12, 12, 12)
                .addComponent(recorrido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(recorido)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 24, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void GenerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerarActionPerformed
        int numFilas;
        int numColumnas;

        try {
            numFilas = Integer.parseInt(Filas.getText());
            numColumnas = Integer.parseInt(Columnas.getText());
        } catch (NumberFormatException e) {
            CampoMatriz.setText("Por favor, ingrese numeros validos.");
            return;
        }

        // Genera la matriz y almacénala en matrizActual
        matrizActual = new int[numFilas][numColumnas];

        // Llena la matriz con números aleatorios
        StringBuilder matrizTexto = new StringBuilder();
        for (int i = 0; i < numFilas; i++) {
            for (int j = 0; j < numColumnas; j++) {
                matrizActual[i][j] = (int) (Math.random() * 10); // Números aleatorios
                matrizTexto.append(matrizActual[i][j]).append(" ");
            }
            matrizTexto.append("\n");


    }//GEN-LAST:event_GenerarActionPerformed

    private void LimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimpiarActionPerformed
        recorrido.setText("");
        CampoMatriz.setText("");
        Filas.setText("");
        Columnas.setText("");


    }//GEN-LAST:event_LimpiarActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_SalirActionPerformed

    private void tw3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tw3ActionPerformed
        imprimirMatrizDiagonalInversa(recorrido);
    }//GEN-LAST:event_tw3ActionPerformed

    private void ColumnasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColumnasActionPerformed
        Integer Num2 = Integer.parseInt(Columnas.getText());
    }//GEN-LAST:event_ColumnasActionPerformed

    private void abajo_arribaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abajo_arribaActionPerformed
        imprimirMatrizAlternada(recorrido);

    }//GEN-LAST:event_abajo_arribaActionPerformed

    private void FilasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilasActionPerformed
        Integer Num1 = Integer.parseInt(Filas.getText());
    }//GEN-LAST:event_FilasActionPerformed

    private void izq_derActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_izq_derActionPerformed
        imprimirMatrizZigzagHorizontal(recorrido);
    }//GEN-LAST:event_izq_derActionPerformed

    private void der_izqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_der_izqActionPerformed
        imprimirMatrizDerechaIzquierda(recorrido);
    }//GEN-LAST:event_der_izqActionPerformed

    private void arriba_abajoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_arriba_abajoActionPerformed
        imprimirMatrizArribaAbajo(recorrido);
    }//GEN-LAST:event_arriba_abajoActionPerformed

    private void izq2_der2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_izq2_der2ActionPerformed
        imprimirMatrizZigzagHorizontalIzqDer(recorrido);
    }//GEN-LAST:event_izq2_der2ActionPerformed

    private void ab_arr_ab_abActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ab_arr_ab_abActionPerformed
        imprimirMatrizZigzagVerticalAbajoArriba(recorrido);
    }//GEN-LAST:event_ab_arr_ab_abActionPerformed

    private void der2_izq2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_der2_izq2ActionPerformed
        imprimirMatrizZigzagHorizontalDerIzq(recorrido);
    }//GEN-LAST:event_der2_izq2ActionPerformed

    private void aba2_arri2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aba2_arri2ActionPerformed
        imprimirMatrizZigzagVerticalArribaAbajo(recorrido);
    }//GEN-LAST:event_aba2_arri2ActionPerformed

    private void tw1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tw1ActionPerformed
        imprimirMatrizEspiralAfueraAdentro(recorrido);
    }//GEN-LAST:event_tw1ActionPerformed

    private void tw2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tw2ActionPerformed
        imprimirMatrizDiagonalPrincipal(recorrido);
    }//GEN-LAST:event_tw2ActionPerformed

    private void twisterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twisterActionPerformed
        imprimirMatrizEspiralCentroAfuera(recorrido);
    }//GEN-LAST:event_twisterActionPerformed

    private void recorridoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recorridoActionPerformed


    }//GEN-LAST:event_recorridoActionPerformed

    private int[][] matrizActual;

    private int[][] generarMatrizAleatoria(int filas, int columnas) {
        int[][] matriz = new int[filas][columnas];
        for (int i = 0; i < filas; i++) {
            for (int j = 0; j < columnas; j++) {
                matriz[i][j] = (int) (Math.random() * 10);
            }
        }
        return matriz;
    }

    private void mostrarMatriz(int[][] matriz, JTextArea area) {
        StringBuilder sb = new StringBuilder();
        for (int[] fila : matriz) {
            for (int valor : fila) {
                sb.append(String.format("%4d", valor));
            }
            sb.append("\n");
        }
        area.setText(sb.toString());

    }

    private void imprimirMatrizZigzagVerticalArribaAbajo(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();
        boolean arribaAbajo = true;

        for (int j = 0; j < matrizActual[0].length; j++) {
            if (arribaAbajo) {
                for (int i = 0; i < matrizActual.length; i++) {
                    sb.append(matrizActual[i][j]).append(",");
                }
            } else {
                for (int i = matrizActual.length - 1; i >= 0; i--) {
                    sb.append(matrizActual[i][j]).append(",");
                }
            }
            arribaAbajo = !arribaAbajo;
        }

        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);  // Eliminar la última coma
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizZigzagHorizontalDerIzq(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();
        boolean derechaAIzquierda = true;

        for (int i = 0; i < matrizActual.length; i++) {
            if (derechaAIzquierda) {
                for (int j = matrizActual[i].length - 1; j >= 0; j--) {
                    sb.append(matrizActual[i][j]).append(",");
                }
            } else {
                for (int j = 0; j < matrizActual[i].length; j++) {
                    sb.append(matrizActual[i][j]).append(",");
                }
            }
            derechaAIzquierda = !derechaAIzquierda;
        }

        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);  // Eliminar la última coma
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizZigzagVerticalAbajoArriba(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();
        boolean abajoArriba = true;

        for (int j = 0; j < matrizActual[0].length; j++) {
            if (abajoArriba) {
                for (int i = matrizActual.length - 1; i >= 0; i--) {
                    sb.append(matrizActual[i][j]).append(",");
                }
            } else {
                for (int i = 0; i < matrizActual.length; i++) {
                    sb.append(matrizActual[i][j]).append(",");
                }
            }
            abajoArriba = !abajoArriba;
        }

        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);  // Eliminar la última coma
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizZigzagHorizontalIzqDer(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();
        boolean izquierdaADerecha = true;

        for (int i = 0; i < matrizActual.length; i++) {
            if (izquierdaADerecha) {
                for (int j = 0; j < matrizActual[i].length; j++) {
                    sb.append(matrizActual[i][j]).append(",");
                }
            } else {
                for (int j = matrizActual[i].length - 1; j >= 0; j--) {
                    sb.append(matrizActual[i][j]).append(",");
                }
            }
            izquierdaADerecha = !izquierdaADerecha;
        }

        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);  // Eliminar la última coma
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizAlternada(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();
        boolean arribaAbajo = true;

        if (matrizActual == null) {
            recorrido.setText("No se ha generado ninguna matriz.");
            return;
        }

        for (int j = 0; j < matrizActual[0].length; j++) {
            if (arribaAbajo) {
                for (int i = 0; i < matrizActual.length; i++) {
                    sb.append(matrizActual[i][j]).append(",");
                }
            } else {
                for (int i = matrizActual.length - 1; i >= 0; i--) {
                    sb.append(matrizActual[i][j]).append(",");
                }
            }
            arribaAbajo = !arribaAbajo;
        }

        // Eliminar la última coma
        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizIzquierdaDerecha(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < matrizActual.length; i++) {
            for (int j = 0; j < matrizActual[0].length; j++) {
                sb.append(matrizActual[i][j]).append(",");
            }
        }

        // Eliminar la última coma
        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizDerechaIzquierda(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();

        for (int i = 0; i < matrizActual.length; i++) {
            for (int j = matrizActual[0].length - 1; j >= 0; j--) {
                sb.append(matrizActual[i][j]).append(",");
            }
        }

        // Eliminar la última coma
        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizArribaAbajo(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();

        for (int j = 0; j < matrizActual[0].length; j++) {
            for (int i = 0; i < matrizActual.length; i++) {
                sb.append(matrizActual[i][j]).append(",");
            }
        }

        // Eliminar la última coma
        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizAbajoArriba(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();

        for (int j = 0; j < matrizActual[0].length; j++) {
            for (int i = matrizActual.length - 1; i >= 0; i--) {
                sb.append(matrizActual[i][j]).append(",");
            }
        }

        // Eliminar la última coma
        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizZigzagHorizontal(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();
        boolean izquierdaADerecha = true;

        // Asegúrate de que matrizActual contiene la matriz generada
        if (matrizActual == null) {
            recorrido.setText("Error: la matriz no está inicializada.");
            return;
        }

        // Recorre la matriz
        for (int i = 0; i < matrizActual.length; i++) {
            if (izquierdaADerecha) {
                // Recorre de izquierda a derecha
                for (int j = 0; j < matrizActual[i].length; j++) {
                    sb.append(matrizActual[i][j]).append(" ");
                }
            } else {
                // Recorre de derecha a izquierda
                for (int j = matrizActual[i].length - 1; j >= 0; j--) {
                    sb.append(matrizActual[i][j]).append(" ");
                }
            }
            izquierdaADerecha = !izquierdaADerecha; // Cambia la dirección para la siguiente fila
        }

        // Eliminar el último espacio extra
        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizZigzagVertical(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();
        boolean arribaAbajo = true;

        for (int j = 0; j < matrizActual[0].length; j++) {
            if (arribaAbajo) {
                for (int i = 0; i < matrizActual.length; i++) {
                    sb.append(matrizActual[i][j]).append(",");
                }
            } else {
                for (int i = matrizActual.length - 1; i >= 0; i--) {
                    sb.append(matrizActual[i][j]).append(",");
                }
            }
            arribaAbajo = !arribaAbajo;
        }

        // Eliminar la última coma
        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizEspiralAfueraAdentro(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();
        int filaInicio = 0, filaFin = matrizActual.length - 1;
        int colInicio = 0, colFin = matrizActual[0].length - 1;

        while (filaInicio <= filaFin && colInicio <= colFin) {
            for (int i = colInicio; i <= colFin; i++) {
                sb.append(matrizActual[filaInicio][i]).append(",");
            }
            filaInicio++;
            for (int i = filaInicio; i <= filaFin; i++) {
                sb.append(matrizActual[i][colFin]).append(",");
            }
            colFin--;
            if (filaInicio <= filaFin) {
                for (int i = colFin; i >= colInicio; i--) {
                    sb.append(matrizActual[filaFin][i]).append(",");
                }
                filaFin--;
            }
            if (colInicio <= colFin) {
                for (int i = filaFin; i >= filaInicio; i--) {
                    sb.append(matrizActual[i][colInicio]).append(",");
                }
                colInicio++;
            }
        }

        // Eliminar la última coma
        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizEspiralCentroAfuera(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();
        int filas = matrizActual.length;
        int columnas = matrizActual[0].length;

        // Determinar el centro de la matriz
        int centroFila = filas / 2;
        int centroColumna = columnas / 2;

        // Si la matriz tiene un número par de filas o columnas, ajustamos el centro a la esquina superior izquierda del centro
        if (filas % 2 == 0) {
            centroFila -= 1;
        }
        if (columnas % 2 == 0) {
            centroColumna -= 1;
        }

        // Definir los límites del recorrido
        int filaInicio = centroFila, filaFin = centroFila;
        int colInicio = centroColumna, colFin = centroColumna;

        // Agregar el primer elemento (el centro)
        sb.append(matrizActual[centroFila][centroColumna]).append(",");

        // Expandir en espiral
        while (filaInicio > 0 || filaFin < filas - 1 || colInicio > 0 || colFin < columnas - 1) {
            // Expandir a la derecha
            if (colFin < columnas - 1) {
                colFin++;
                for (int j = colInicio; j <= colFin; j++) {
                    sb.append(matrizActual[filaInicio][j]).append(",");
                }
            }

            // Expandir hacia abajo
            if (filaFin < filas - 1) {
                filaFin++;
                for (int i = filaInicio + 1; i <= filaFin; i++) {
                    sb.append(matrizActual[i][colFin]).append(",");
                }
            }

            // Expandir a la izquierda
            if (colInicio > 0) {
                colInicio--;
                for (int j = colFin - 1; j >= colInicio; j--) {
                    sb.append(matrizActual[filaFin][j]).append(",");
                }
            }

            // Expandir hacia arriba
            if (filaInicio > 0) {
                filaInicio--;
                for (int i = filaFin - 1; i > filaInicio; i--) {
                    sb.append(matrizActual[i][colInicio]).append(",");
                }
            }
        }

        // Eliminar la última coma
        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizDiagonalPrincipal(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();
        int filas = matrizActual.length;
        int columnas = matrizActual[0].length;

        for (int i = 0; i < Math.min(filas, columnas); i++) {
            sb.append(matrizActual[i][i]).append(",");
        }

        // Eliminar la última coma
        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }

        recorrido.setText(sb.toString());
    }

    private void imprimirMatrizDiagonalInversa(JTextField recorrido) {
        StringBuilder sb = new StringBuilder();
        int filas = matrizActual.length;
        int columnas = matrizActual[0].length;

        for (int i = 0; i < Math.min(filas, columnas); i++) {
            sb.append(matrizActual[i][columnas - 1 - i]).append(",");
        }

        // Eliminar la última coma
        if (sb.length() > 0) {
            sb.deleteCharAt(sb.length() - 1);
        }

        recorrido.setText(sb.toString());
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RecorridosMatriz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RecorridosMatriz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RecorridosMatriz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RecorridosMatriz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RecorridosMatriz RM = new RecorridosMatriz();
                RM.setVisible(true);
                RM.setLocationRelativeTo(null);

            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea CampoMatriz;
    private javax.swing.JTextField Columnas;
    private javax.swing.JTextField Filas;
    private javax.swing.JButton Generar;
    private javax.swing.JButton Limpiar;
    private javax.swing.JButton Salir;
    private javax.swing.JButton ab_arr_ab_ab;
    private javax.swing.JButton aba2_arri2;
    private javax.swing.JButton abajo_arriba;
    private javax.swing.JButton arriba_abajo;
    private javax.swing.JButton der2_izq2;
    private javax.swing.JButton der_izq;
    private javax.swing.JButton izq2_der2;
    private javax.swing.JButton izq_der;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel recorido;
    private javax.swing.JTextField recorrido;
    private javax.swing.JButton tw1;
    private javax.swing.JButton tw2;
    private javax.swing.JButton tw3;
    private javax.swing.JButton twister;
    // End of variables declaration//GEN-END:variables
}
